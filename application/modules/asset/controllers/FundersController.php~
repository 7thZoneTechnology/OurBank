<?php
class Management_FundersController extends Zend_Controller_Action{

    public function init() {
        $this->view->pageTitle='Funders';
    }

    public function indexAction() {

        $storage = new Zend_Auth_Storage_Session();
        $data = $storage->read();
        if(!$data){
            $this->_redirect('index/login');
         }
        $this->view->title = "Funders";
        $searchForm = new Management_Form_Search();
        $this->view->form = $searchForm;

        $funders = new Management_Model_Funders();
        $result = $funders->getFundersDetails();

        foreach($result as $funders) {
                $searchForm->field1->addMultiOption($funders['fundername'],$funders['fundername']);
        }

        if ($this->_request->isPost() && $this->_request->getPost('Search')) {
            $formData = $this->_request->getPost();
            if ($this->_request->isPost()) {
                $formData = $this->_request->getPost();
                if ($searchForm->isValid($formData)) {
                    $funders = new Management_Model_Funders();
                    $result = $funders->SearchFunder($searchForm->getValues());

                    $page = $this->_getParam('page',1);
                    $paginator = Zend_Paginator::factory($result);
                    $paginator->setItemCountPerPage(5);
                    $paginator->setCurrentPageNumber($page);
                    $this->view->paginator = $paginator;
                }
            }
        }

        $page = $this->_getParam('page',1);
        $paginator = Zend_Paginator::factory($result);
        $paginator->setItemCountPerPage(5);
        $paginator->setCurrentPageNumber($page);
        $this->view->paginator = $paginator;

    }

    public function fundersviewAction() {
        $this->view->title = "View Funders";
        $funderaddress_id = $this->_getParam('funder_id');

        $funders = new Management_Model_Funders();
        $result = $funders->viewFunders($funderaddress_id);
        $this->view->funders = $result;
    }

    public function fundersaddAction() {
        $this->view->title = "Add Funders";
        $funders = new Management_Model_Funders();
        $this->view->result = $funders->getFundersDetails();

        $fundersForm = new Management_Form_Funders();
        $this->view->form = $fundersForm;
		
		
        if ($this->_request->isPost() && $this->_request->getPost('Submit')) {
            $formData = $this->_request->getPost();
            if ($this->_request->isPost()) {
                $formData = $this->_request->getPost();
                if ($fundersForm->isValid($formData)) {

                    $dbAdapter = Zend_Db_Table::getDefaultAdapter();
                    $data['funder_id']='';
                    $dbAdapter->insert('ourbank_funders', $data);
                    $funder_id  = Zend_Db_Table::getDefaultAdapter()->lastInsertId('ourbank_funders','funder_id');

                    $funders = new Management_Model_Funders();
                    $result = $funders->addFunder($fundersForm->getValues(),$funder_id);
                    $this->_redirect('management/funders/index');
               }
            }
        }
    }

    public function funderseditAction() {
        $this->view->title = "Edit Funders";
        $funderaddress_id = (int)$this->_getParam('funder_id');

        $funders = new Management_Model_Funders();
        $this->view->funders = $funders->getFundersDetails();

        $fundersForm = new Management_Form_Funders();
        $this->view->form = $fundersForm;
		
        $funders = new Management_Model_Funders();
        $result = $funders->viewFunders($funderaddress_id);
        foreach($result as $funders) {
                $this->view->form->fundername->setValue($funders->fundername);
                $this->view->form->fundershortname->setValue($funders->fundershortname);
                $this->view->form->funderaddress1->setValue($funders->funderaddress1);
                $this->view->form->funderaddress2->setValue($funders->funderaddress2);
                $this->view->form->funderaddress3->setValue($funders->funderaddress3);
                $this->view->form->fundercity->setValue($funders->fundercity);
                $this->view->form->funderstate->setValue($funders->funderstate);
                $this->view->form->fundercountry->setValue($funders->fundercountry);
                $this->view->form->funderpincode->setValue($funders->funderpincode);
                $this->view->form->funderphone->setValue($funders->funderphone);
                $this->view->form->emailaddress->setValue($funders->emailaddress);
                $this->view->form->funderaddress_id->setValue($funders->funderaddress_id);
                $this->view->form->funder_id->setValue($funders->funder_id);
        }

        $fundersForm->fundername->removeValidator('Db_NoRecordExists');
        $fundersForm->fundershortname->removeValidator('Db_NoRecordExists');
        if ($this->_request->isPost() && $this->_request->getPost('Update')) {
            $formData = $this->_request->getPost();
            if ($this->_request->isPost()) {
                $formData = $this->_request->getPost();
                if ($fundersForm->isValid($formData)) {
			$sessionName = new Zend_Session_Namespace('ourbank');
			$createdby = $sessionName->primaryuserid;

                        $funderaddress_id = $fundersForm->getvalue('funder_id');
			$fundername = $fundersForm->getvalue('fundername');
			$fundershortname = $fundersForm->getvalue('fundershortname');
			$funderaddress1 = $fundersForm->getvalue('funderaddress1');
			$funderaddress2 = $fundersForm->getvalue('funderaddress2');
			$funderaddress3 = $fundersForm->getvalue('funderaddress3');
			$fundercity = $fundersForm->getvalue('fundercity');
			$funderstate = $fundersForm->getvalue('funderstate');
			$fundercountry = $fundersForm->getvalue('fundercountry');
			$funderpincode = $fundersForm->getvalue('funderpincode');
			$emailaddress = $fundersForm->getvalue('emailaddress');
			$funderphone = $fundersForm->getvalue('funderphone');

                        $funders = new Management_Model_Funders();
                        $result = $funders->viewFunders($funderaddress_id);
                        $this->view->funders = $result;
                        foreach($result as $funders) {
                            $fundernameold = $funders->fundername;
                            $fundershortnameold = $funders->fundershortname;
                            $funderaddress1old = $funders->funderaddress1;
                            $funderaddress2old = $funders->funderaddress2;
                            $funderaddress3old = $funders->funderaddress3;
                            $fundercityold = $funders->fundercity;
                            $funderstateold = $funders->funderstate;
                            $fundercountryold = $funders->fundercountry;
                            $funderpincodeold = $funders->funderpincode;
                            $emailaddressold = $funders->emailaddress;
                            $funderphoneold = $funders->funderphone;
                        }

			$updateOldfunders = array('fundername' => $fundernameold,
						'fundershortname' => $fundershortnameold,
						'funderaddress1' => $funderaddress1old,
						'funderaddress2' => $funderaddress2old,
						'funderaddress3' => $funderaddress3old,
						'fundercity' => $fundercityold,
						'funderstate' => $funderstateold,
						'fundercountry' => $fundercountryold,
						'funderpincode' => $funderpincodeold,
						'emailaddress' => $emailaddressold,
						'funderphone' => $funderphoneold);

			$updateNewfunders = array('fundername' => $fundername,
						'fundershortname' => $fundershortname,
						'funderaddress1' => $funderaddress1,
						'funderaddress2' => $funderaddress2,
						'funderaddress3' => $funderaddress3,
						'fundercity' => $fundercity,
						'funderstate' => $funderstate,
						'fundercountry' => $fundercountry,
						'funderpincode' => $funderpincode,
						'emailaddress' => $emailaddress,
						'funderphone' => $funderphone);

			$match = array();
			foreach ($updateOldfunders as $key=>$val) {
			     if ($val != $updateNewfunders[$key]) {
			         $match[] = $key;
			     }
			}

			if(count($match) <= 0) {             /** if the values are not changed */
			     $this->view->nomatch = 'Values are not changed in form';
			} else {   
			     /** if the values are changed */
                            $funds = new Management_Model_Funders();
                            $funds->UpdateFunders($funderaddress_id);
			    $funds->funderUpdate($updateOldfunders,$updateNewfunders,$createdby,$funderaddress_id);
                            $result = $funds->editFunders($fundersForm->getValues());
                            $this->_redirect('management/funders');
			}
              }
           }
       }
     $this->view->form->Submit->setName('Update');	
    }

    public function fundersdeleteAction() {
        $this->view->title = "Delete Funders";
        $funderaddress_id = $this->_getParam('funder_id');
        $this->view->funderaddress_id = $funderaddress_id;

        $funders = new Management_Model_Funders();
        $result = $funders->viewFunders($funderaddress_id);
        $this->view->funders = $result;
        foreach($this->view->funders as $funders){
            $this->view->recordstatus_id = $funders['recordstatus_id'];
        }

        $deleteform = new Management_Form_Delete();
        $this->view->deleteform = $deleteform;

        if ($this->_request->isPost() && $this->_request->getPost('Yes')) {
            $formData = $this->_request->getPost();
            if ($deleteform->isValid($formData)) {
                $remarks = $deleteform->getvalue('remarks');
                $funds = new Management_Model_Funders();
                $funds->deleteFunders($funderaddress_id,$remarks);
//                 $this->_redirect('management/funders');
            }
        }

    }
}